/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AlbumTitleLinkView
 */
export interface AlbumTitleLinkView {
    /**
     * 
     * @type {number}
     * @memberof AlbumTitleLinkView
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof AlbumTitleLinkView
     */
    'titleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AlbumTitleLinkView
     */
    'albumId'?: number;
}
/**
 * 
 * @export
 * @interface AlbumView
 */
export interface AlbumView {
    /**
     * 
     * @type {number}
     * @memberof AlbumView
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AlbumView
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumView
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumView
     */
    'cover'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumView
     */
    'releaseDate'?: string;
}
/**
 * 
 * @export
 * @interface ArtistTitleLinkView
 */
export interface ArtistTitleLinkView {
    /**
     * 
     * @type {number}
     * @memberof ArtistTitleLinkView
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArtistTitleLinkView
     */
    'titleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ArtistTitleLinkView
     */
    'artistId'?: number;
}
/**
 * 
 * @export
 * @interface ArtistView
 */
export interface ArtistView {
    /**
     * 
     * @type {number}
     * @memberof ArtistView
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArtistView
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistView
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistView
     */
    'biography'?: string;
}
/**
 * 
 * @export
 * @interface AudioDTO
 */
export interface AudioDTO {
    /**
     * 
     * @type {LabelView}
     * @memberof AudioDTO
     */
    'label'?: LabelView;
    /**
     * 
     * @type {string}
     * @memberof AudioDTO
     */
    'wav': string;
}
/**
 * 
 * @export
 * @interface AudioTitleLinkView
 */
export interface AudioTitleLinkView {
    /**
     * 
     * @type {number}
     * @memberof AudioTitleLinkView
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof AudioTitleLinkView
     */
    'titleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AudioTitleLinkView
     */
    'audioId'?: number;
}
/**
 * 
 * @export
 * @interface AudioView
 */
export interface AudioView {
    /**
     * 
     * @type {number}
     * @memberof AudioView
     */
    'id'?: number;
    /**
     * 
     * @type {LabelView}
     * @memberof AudioView
     */
    'label'?: LabelView;
    /**
     * 
     * @type {string}
     * @memberof AudioView
     */
    'mp3'?: string;
    /**
     * 
     * @type {string}
     * @memberof AudioView
     */
    'wav'?: string;
}
/**
 * 
 * @export
 * @interface AuthenticationView
 */
export interface AuthenticationView {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationView
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationView
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface DownloadView
 */
export interface DownloadView {
    /**
     * 
     * @type {number}
     * @memberof DownloadView
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadView
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadView
     */
    'audioId'?: number;
}
/**
 * 
 * @export
 * @interface GenreDTO
 */
export interface GenreDTO {
    /**
     * 
     * @type {number}
     * @memberof GenreDTO
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GenreTitleLinkView
 */
export interface GenreTitleLinkView {
    /**
     * 
     * @type {number}
     * @memberof GenreTitleLinkView
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GenreTitleLinkView
     */
    'titleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GenreTitleLinkView
     */
    'genreId'?: number;
}
/**
 * 
 * @export
 * @interface InstrumentDTO
 */
export interface InstrumentDTO {
    /**
     * 
     * @type {number}
     * @memberof InstrumentDTO
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface InstrumentView
 */
export interface InstrumentView {
    /**
     * 
     * @type {number}
     * @memberof InstrumentView
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InstrumentView
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface LabelView
 */
export interface LabelView {
    /**
     * 
     * @type {number}
     * @memberof LabelView
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LabelView
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LabelView
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof LabelView
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LabelView
     */
    'biography'?: string;
}
/**
 * 
 * @export
 * @interface MoodDTO
 */
export interface MoodDTO {
    /**
     * 
     * @type {number}
     * @memberof MoodDTO
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface MoodView
 */
export interface MoodView {
    /**
     * 
     * @type {number}
     * @memberof MoodView
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MoodView
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface OwnerTitleLinkView
 */
export interface OwnerTitleLinkView {
    /**
     * 
     * @type {number}
     * @memberof OwnerTitleLinkView
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OwnerTitleLinkView
     */
    'titleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OwnerTitleLinkView
     */
    'ownerId'?: number;
}
/**
 * 
 * @export
 * @interface OwnerView
 */
export interface OwnerView {
    /**
     * 
     * @type {number}
     * @memberof OwnerView
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OwnerView
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface PresskitView
 */
export interface PresskitView {
    /**
     * 
     * @type {number}
     * @memberof PresskitView
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PresskitView
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof PresskitView
     */
    'pdf'?: string;
}
/**
 * 
 * @export
 * @interface PrivatePlaylistCreateDTO
 */
export interface PrivatePlaylistCreateDTO {
    /**
     * 
     * @type {PrivatePlaylistView}
     * @memberof PrivatePlaylistCreateDTO
     */
    'playlist'?: PrivatePlaylistView;
    /**
     * 
     * @type {Array<number>}
     * @memberof PrivatePlaylistCreateDTO
     */
    'titles'?: Array<number>;
}
/**
 * 
 * @export
 * @interface PrivatePlaylistTitleLinkView
 */
export interface PrivatePlaylistTitleLinkView {
    /**
     * 
     * @type {number}
     * @memberof PrivatePlaylistTitleLinkView
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PrivatePlaylistTitleLinkView
     */
    'titleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PrivatePlaylistTitleLinkView
     */
    'privatePlaylistId'?: number;
}
/**
 * 
 * @export
 * @interface PrivatePlaylistView
 */
export interface PrivatePlaylistView {
    /**
     * 
     * @type {number}
     * @memberof PrivatePlaylistView
     */
    'id'?: number;
    /**
     * 
     * @type {UserView}
     * @memberof PrivatePlaylistView
     */
    'user'?: UserView;
    /**
     * 
     * @type {string}
     * @memberof PrivatePlaylistView
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrivatePlaylistView
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrivatePlaylistView
     */
    'previewPicture'?: string;
}
/**
 * 
 * @export
 * @interface PublicPlaylistView
 */
export interface PublicPlaylistView {
    /**
     * 
     * @type {number}
     * @memberof PublicPlaylistView
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PublicPlaylistView
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicPlaylistView
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicPlaylistView
     */
    'previewPicture'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicPlaylistView
     */
    'visible'?: boolean;
}
/**
 * 
 * @export
 * @interface TitleView
 */
export interface TitleView {
    /**
     * 
     * @type {number}
     * @memberof TitleView
     */
    'id'?: number;
    /**
     * 
     * @type {LabelView}
     * @memberof TitleView
     */
    'label'?: LabelView;
    /**
     * 
     * @type {string}
     * @memberof TitleView
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TitleView
     */
    'gemaNr'?: string;
    /**
     * 
     * @type {number}
     * @memberof TitleView
     */
    'bpm'?: number;
    /**
     * 
     * @type {string}
     * @memberof TitleView
     */
    'releaseDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TitleView
     */
    'visible'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TitleView
     */
    'cover'?: string;
}
/**
 * 
 * @export
 * @interface UserView
 */
export interface UserView {
    /**
     * 
     * @type {string}
     * @memberof UserView
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserView
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserView
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserView
     */
    'role'?: UserViewRoleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UserViewRoleEnum {
    LABEL = 'LABEL',
    USER = 'USER'
}


/**
 * AlbumControllerApi - axios parameter creator
 * @export
 */
export const AlbumControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all albums
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbums: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/album`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlbumControllerApi - functional programming interface
 * @export
 */
export const AlbumControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlbumControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all albums
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlbums(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlbumView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlbums(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlbumControllerApi - factory interface
 * @export
 */
export const AlbumControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlbumControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all albums
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbums(options?: any): AxiosPromise<Array<AlbumView>> {
            return localVarFp.getAlbums(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlbumControllerApi - object-oriented interface
 * @export
 * @class AlbumControllerApi
 * @extends {BaseAPI}
 */
export class AlbumControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns all albums
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumControllerApi
     */
    public getAlbums(options?: AxiosRequestConfig) {
        return AlbumControllerApiFp(this.configuration).getAlbums(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AlbumTitleControllerApi - axios parameter creator
 * @export
 */
export const AlbumTitleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the titles of a specific album
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumOfTitle: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/album-title-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlbumTitleControllerApi - functional programming interface
 * @export
 */
export const AlbumTitleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlbumTitleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the titles of a specific album
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlbumOfTitle(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumTitleLinkView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlbumOfTitle(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlbumTitleControllerApi - factory interface
 * @export
 */
export const AlbumTitleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlbumTitleControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the titles of a specific album
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumOfTitle(options?: any): AxiosPromise<AlbumTitleLinkView> {
            return localVarFp.getAlbumOfTitle(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlbumTitleControllerApi - object-oriented interface
 * @export
 * @class AlbumTitleControllerApi
 * @extends {BaseAPI}
 */
export class AlbumTitleControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns the titles of a specific album
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumTitleControllerApi
     */
    public getAlbumOfTitle(options?: AxiosRequestConfig) {
        return AlbumTitleControllerApiFp(this.configuration).getAlbumOfTitle(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ArtistControllerApi - axios parameter creator
 * @export
 */
export const ArtistControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all Artists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtists: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/artist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArtistControllerApi - functional programming interface
 * @export
 */
export const ArtistControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArtistControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all Artists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtists(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArtistView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArtists(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArtistControllerApi - factory interface
 * @export
 */
export const ArtistControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArtistControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all Artists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtists(options?: any): AxiosPromise<Array<ArtistView>> {
            return localVarFp.getArtists(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArtistControllerApi - object-oriented interface
 * @export
 * @class ArtistControllerApi
 * @extends {BaseAPI}
 */
export class ArtistControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns all Artists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistControllerApi
     */
    public getArtists(options?: AxiosRequestConfig) {
        return ArtistControllerApiFp(this.configuration).getArtists(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ArtistTitleControllerApi - axios parameter creator
 * @export
 */
export const ArtistTitleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the composer of tile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistOfTitle: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/artist-title-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArtistTitleControllerApi - functional programming interface
 * @export
 */
export const ArtistTitleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArtistTitleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the composer of tile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtistOfTitle(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistTitleLinkView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArtistOfTitle(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArtistTitleControllerApi - factory interface
 * @export
 */
export const ArtistTitleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArtistTitleControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the composer of tile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistOfTitle(options?: any): AxiosPromise<ArtistTitleLinkView> {
            return localVarFp.getArtistOfTitle(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArtistTitleControllerApi - object-oriented interface
 * @export
 * @class ArtistTitleControllerApi
 * @extends {BaseAPI}
 */
export class ArtistTitleControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns the composer of tile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistTitleControllerApi
     */
    public getArtistOfTitle(options?: AxiosRequestConfig) {
        return ArtistTitleControllerApiFp(this.configuration).getArtistOfTitle(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AudioControllerApi - axios parameter creator
 * @export
 */
export const AudioControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns specific audio file
         * @param {string} audioId The ID of the audio file to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFile: async (audioId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'audioId' is not null or undefined
            assertParamExists('getAudioFile', 'audioId', audioId)
            const localVarPath = `/audio-file/{audioId}`
                .replace(`{${"audioId"}}`, encodeURIComponent(String(audioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all audio files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudios: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Uploads a wav file to the db
         * @param {number} labelId 
         * @param {any} wav 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAudio: async (labelId: number, wav: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'labelId' is not null or undefined
            assertParamExists('postAudio', 'labelId', labelId)
            // verify required parameter 'wav' is not null or undefined
            assertParamExists('postAudio', 'wav', wav)
            const localVarPath = `/audio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


            if (labelId !== undefined) { 
                localVarFormParams.append('labelId', labelId as any);
            }
    
            if (wav !== undefined) { 
                localVarFormParams.append('wav', wav as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AudioControllerApi - functional programming interface
 * @export
 */
export const AudioControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AudioControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns specific audio file
         * @param {string} audioId The ID of the audio file to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioFile(audioId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudioFile(audioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all audio files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudios(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AudioView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudios(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Uploads a wav file to the db
         * @param {number} labelId 
         * @param {any} wav 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAudio(labelId: number, wav: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudioView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAudio(labelId, wav, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AudioControllerApi - factory interface
 * @export
 */
export const AudioControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AudioControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns specific audio file
         * @param {string} audioId The ID of the audio file to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFile(audioId: string, options?: any): AxiosPromise<string> {
            return localVarFp.getAudioFile(audioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all audio files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudios(options?: any): AxiosPromise<Array<AudioView>> {
            return localVarFp.getAudios(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Uploads a wav file to the db
         * @param {number} labelId 
         * @param {any} wav 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAudio(labelId: number, wav: any, options?: any): AxiosPromise<AudioView> {
            return localVarFp.postAudio(labelId, wav, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAudioFile operation in AudioControllerApi.
 * @export
 * @interface AudioControllerApiGetAudioFileRequest
 */
export interface AudioControllerApiGetAudioFileRequest {
    /**
     * The ID of the audio file to retrieve
     * @type {string}
     * @memberof AudioControllerApiGetAudioFile
     */
    readonly audioId: string
}

/**
 * Request parameters for postAudio operation in AudioControllerApi.
 * @export
 * @interface AudioControllerApiPostAudioRequest
 */
export interface AudioControllerApiPostAudioRequest {
    /**
     * 
     * @type {number}
     * @memberof AudioControllerApiPostAudio
     */
    readonly labelId: number

    /**
     * 
     * @type {any}
     * @memberof AudioControllerApiPostAudio
     */
    readonly wav: any
}

/**
 * AudioControllerApi - object-oriented interface
 * @export
 * @class AudioControllerApi
 * @extends {BaseAPI}
 */
export class AudioControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns specific audio file
     * @param {AudioControllerApiGetAudioFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioControllerApi
     */
    public getAudioFile(requestParameters: AudioControllerApiGetAudioFileRequest, options?: AxiosRequestConfig) {
        return AudioControllerApiFp(this.configuration).getAudioFile(requestParameters.audioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all audio files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioControllerApi
     */
    public getAudios(options?: AxiosRequestConfig) {
        return AudioControllerApiFp(this.configuration).getAudios(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Uploads a wav file to the db
     * @param {AudioControllerApiPostAudioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioControllerApi
     */
    public postAudio(requestParameters: AudioControllerApiPostAudioRequest, options?: AxiosRequestConfig) {
        return AudioControllerApiFp(this.configuration).postAudio(requestParameters.labelId, requestParameters.wav, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AudioTitleLinkControllerApi - axios parameter creator
 * @export
 */
export const AudioTitleLinkControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all audio files of a specific song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioTitleLinks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audio-title-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AudioTitleLinkControllerApi - functional programming interface
 * @export
 */
export const AudioTitleLinkControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AudioTitleLinkControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all audio files of a specific song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioTitleLinks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AudioView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudioTitleLinks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AudioTitleLinkControllerApi - factory interface
 * @export
 */
export const AudioTitleLinkControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AudioTitleLinkControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all audio files of a specific song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioTitleLinks(options?: any): AxiosPromise<Array<AudioView>> {
            return localVarFp.getAudioTitleLinks(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AudioTitleLinkControllerApi - object-oriented interface
 * @export
 * @class AudioTitleLinkControllerApi
 * @extends {BaseAPI}
 */
export class AudioTitleLinkControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns all audio files of a specific song
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudioTitleLinkControllerApi
     */
    public getAudioTitleLinks(options?: AxiosRequestConfig) {
        return AudioTitleLinkControllerApiFp(this.configuration).getAudioTitleLinks(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DownloadControllerApi - axios parameter creator
 * @export
 */
export const DownloadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all downloads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloads: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadControllerApi - functional programming interface
 * @export
 */
export const DownloadControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all downloads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDownloads(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDownloads(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DownloadControllerApi - factory interface
 * @export
 */
export const DownloadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all downloads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloads(options?: any): AxiosPromise<DownloadView> {
            return localVarFp.getDownloads(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadControllerApi - object-oriented interface
 * @export
 * @class DownloadControllerApi
 * @extends {BaseAPI}
 */
export class DownloadControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns all downloads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadControllerApi
     */
    public getDownloads(options?: AxiosRequestConfig) {
        return DownloadControllerApiFp(this.configuration).getDownloads(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GenreControllerApi - axios parameter creator
 * @export
 */
export const GenreControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the genres of a specific title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenres: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genre`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenreControllerApi - functional programming interface
 * @export
 */
export const GenreControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GenreControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the genres of a specific title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGenres(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GenreTitleLinkView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGenres(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GenreControllerApi - factory interface
 * @export
 */
export const GenreControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GenreControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the genres of a specific title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenres(options?: any): AxiosPromise<Array<GenreTitleLinkView>> {
            return localVarFp.getGenres(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GenreControllerApi - object-oriented interface
 * @export
 * @class GenreControllerApi
 * @extends {BaseAPI}
 */
export class GenreControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns the genres of a specific title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenreControllerApi
     */
    public getGenres(options?: AxiosRequestConfig) {
        return GenreControllerApiFp(this.configuration).getGenres(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GenreTitleControllerApi - axios parameter creator
 * @export
 */
export const GenreTitleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the genres of a specific title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreOfTitle: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genre-title-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenreTitleControllerApi - functional programming interface
 * @export
 */
export const GenreTitleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GenreTitleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the genres of a specific title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGenreOfTitle(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenreTitleLinkView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGenreOfTitle(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GenreTitleControllerApi - factory interface
 * @export
 */
export const GenreTitleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GenreTitleControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the genres of a specific title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreOfTitle(options?: any): AxiosPromise<GenreTitleLinkView> {
            return localVarFp.getGenreOfTitle(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GenreTitleControllerApi - object-oriented interface
 * @export
 * @class GenreTitleControllerApi
 * @extends {BaseAPI}
 */
export class GenreTitleControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns the genres of a specific title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenreTitleControllerApi
     */
    public getGenreOfTitle(options?: AxiosRequestConfig) {
        return GenreTitleControllerApiFp(this.configuration).getGenreOfTitle(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InstrumentControllerApi - axios parameter creator
 * @export
 */
export const InstrumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all instruments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstruments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/instrument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstrumentControllerApi - functional programming interface
 * @export
 */
export const InstrumentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstrumentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all instruments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstruments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstrumentView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstruments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstrumentControllerApi - factory interface
 * @export
 */
export const InstrumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstrumentControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all instruments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstruments(options?: any): AxiosPromise<Array<InstrumentView>> {
            return localVarFp.getInstruments(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstrumentControllerApi - object-oriented interface
 * @export
 * @class InstrumentControllerApi
 * @extends {BaseAPI}
 */
export class InstrumentControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns all instruments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstrumentControllerApi
     */
    public getInstruments(options?: AxiosRequestConfig) {
        return InstrumentControllerApiFp(this.configuration).getInstruments(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LabelControllerApi - axios parameter creator
 * @export
 */
export const LabelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new label
         * @param {LabelView} [labelView] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLabel: async (labelView?: LabelView, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/label`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(labelView, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all labels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabels: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/label`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LabelControllerApi - functional programming interface
 * @export
 */
export const LabelControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LabelControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new label
         * @param {LabelView} [labelView] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLabel(labelView?: LabelView, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLabel(labelView, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all labels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLabels(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LabelView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLabels(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LabelControllerApi - factory interface
 * @export
 */
export const LabelControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LabelControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new label
         * @param {LabelView} [labelView] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLabel(labelView?: LabelView, options?: any): AxiosPromise<void> {
            return localVarFp.createLabel(labelView, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all labels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLabels(options?: any): AxiosPromise<Array<LabelView>> {
            return localVarFp.getLabels(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLabel operation in LabelControllerApi.
 * @export
 * @interface LabelControllerApiCreateLabelRequest
 */
export interface LabelControllerApiCreateLabelRequest {
    /**
     * 
     * @type {LabelView}
     * @memberof LabelControllerApiCreateLabel
     */
    readonly labelView?: LabelView
}

/**
 * LabelControllerApi - object-oriented interface
 * @export
 * @class LabelControllerApi
 * @extends {BaseAPI}
 */
export class LabelControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new label
     * @param {LabelControllerApiCreateLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelControllerApi
     */
    public createLabel(requestParameters: LabelControllerApiCreateLabelRequest = {}, options?: AxiosRequestConfig) {
        return LabelControllerApiFp(this.configuration).createLabel(requestParameters.labelView, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all labels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelControllerApi
     */
    public getLabels(options?: AxiosRequestConfig) {
        return LabelControllerApiFp(this.configuration).getLabels(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MoodControllerApi - axios parameter creator
 * @export
 */
export const MoodControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all moods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoods: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mood`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MoodControllerApi - functional programming interface
 * @export
 */
export const MoodControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MoodControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all moods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMoods(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MoodView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMoods(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MoodControllerApi - factory interface
 * @export
 */
export const MoodControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MoodControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all moods
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoods(options?: any): AxiosPromise<Array<MoodView>> {
            return localVarFp.getMoods(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MoodControllerApi - object-oriented interface
 * @export
 * @class MoodControllerApi
 * @extends {BaseAPI}
 */
export class MoodControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns all moods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoodControllerApi
     */
    public getMoods(options?: AxiosRequestConfig) {
        return MoodControllerApiFp(this.configuration).getMoods(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OwnerControllerApi - axios parameter creator
 * @export
 */
export const OwnerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all owners of song titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwners: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/owner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OwnerControllerApi - functional programming interface
 * @export
 */
export const OwnerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OwnerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all owners of song titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwners(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OwnerView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwners(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OwnerControllerApi - factory interface
 * @export
 */
export const OwnerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OwnerControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all owners of song titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwners(options?: any): AxiosPromise<Array<OwnerView>> {
            return localVarFp.getOwners(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OwnerControllerApi - object-oriented interface
 * @export
 * @class OwnerControllerApi
 * @extends {BaseAPI}
 */
export class OwnerControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns all owners of song titles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerControllerApi
     */
    public getOwners(options?: AxiosRequestConfig) {
        return OwnerControllerApiFp(this.configuration).getOwners(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OwnerTitleControllerApi - axios parameter creator
 * @export
 */
export const OwnerTitleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the owner of a title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnerOfTitle: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/owner-title-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OwnerTitleControllerApi - functional programming interface
 * @export
 */
export const OwnerTitleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OwnerTitleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the owner of a title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwnerOfTitle(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OwnerTitleLinkView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwnerOfTitle(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OwnerTitleControllerApi - factory interface
 * @export
 */
export const OwnerTitleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OwnerTitleControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the owner of a title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnerOfTitle(options?: any): AxiosPromise<OwnerTitleLinkView> {
            return localVarFp.getOwnerOfTitle(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OwnerTitleControllerApi - object-oriented interface
 * @export
 * @class OwnerTitleControllerApi
 * @extends {BaseAPI}
 */
export class OwnerTitleControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns the owner of a title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerTitleControllerApi
     */
    public getOwnerOfTitle(options?: AxiosRequestConfig) {
        return OwnerTitleControllerApiFp(this.configuration).getOwnerOfTitle(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PresskitControllerApi - axios parameter creator
 * @export
 */
export const PresskitControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all presskits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPresskits: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/presskit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PresskitControllerApi - functional programming interface
 * @export
 */
export const PresskitControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PresskitControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all presskits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPresskits(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PresskitView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPresskits(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PresskitControllerApi - factory interface
 * @export
 */
export const PresskitControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PresskitControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all presskits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPresskits(options?: any): AxiosPromise<Array<PresskitView>> {
            return localVarFp.getPresskits(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PresskitControllerApi - object-oriented interface
 * @export
 * @class PresskitControllerApi
 * @extends {BaseAPI}
 */
export class PresskitControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns all presskits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PresskitControllerApi
     */
    public getPresskits(options?: AxiosRequestConfig) {
        return PresskitControllerApiFp(this.configuration).getPresskits(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PrivatePlaylistControllerApi - axios parameter creator
 * @export
 */
export const PrivatePlaylistControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates private playlist
         * @param {PrivatePlaylistCreateDTO} [privatePlaylistCreateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrivatePlaylist: async (privatePlaylistCreateDTO?: PrivatePlaylistCreateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/private-playlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(privatePlaylistCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all private playlists
         * @param {string} [username] username to find specific playlist for label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivatePlaylists: async (username?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/private-playlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrivatePlaylistControllerApi - functional programming interface
 * @export
 */
export const PrivatePlaylistControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrivatePlaylistControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates private playlist
         * @param {PrivatePlaylistCreateDTO} [privatePlaylistCreateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPrivatePlaylist(privatePlaylistCreateDTO?: PrivatePlaylistCreateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPrivatePlaylist(privatePlaylistCreateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all private playlists
         * @param {string} [username] username to find specific playlist for label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrivatePlaylists(username?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrivatePlaylistView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrivatePlaylists(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrivatePlaylistControllerApi - factory interface
 * @export
 */
export const PrivatePlaylistControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrivatePlaylistControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates private playlist
         * @param {PrivatePlaylistCreateDTO} [privatePlaylistCreateDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrivatePlaylist(privatePlaylistCreateDTO?: PrivatePlaylistCreateDTO, options?: any): AxiosPromise<void> {
            return localVarFp.createPrivatePlaylist(privatePlaylistCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all private playlists
         * @param {string} [username] username to find specific playlist for label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivatePlaylists(username?: string, options?: any): AxiosPromise<Array<PrivatePlaylistView>> {
            return localVarFp.getPrivatePlaylists(username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPrivatePlaylist operation in PrivatePlaylistControllerApi.
 * @export
 * @interface PrivatePlaylistControllerApiCreatePrivatePlaylistRequest
 */
export interface PrivatePlaylistControllerApiCreatePrivatePlaylistRequest {
    /**
     * 
     * @type {PrivatePlaylistCreateDTO}
     * @memberof PrivatePlaylistControllerApiCreatePrivatePlaylist
     */
    readonly privatePlaylistCreateDTO?: PrivatePlaylistCreateDTO
}

/**
 * Request parameters for getPrivatePlaylists operation in PrivatePlaylistControllerApi.
 * @export
 * @interface PrivatePlaylistControllerApiGetPrivatePlaylistsRequest
 */
export interface PrivatePlaylistControllerApiGetPrivatePlaylistsRequest {
    /**
     * username to find specific playlist for label
     * @type {string}
     * @memberof PrivatePlaylistControllerApiGetPrivatePlaylists
     */
    readonly username?: string
}

/**
 * PrivatePlaylistControllerApi - object-oriented interface
 * @export
 * @class PrivatePlaylistControllerApi
 * @extends {BaseAPI}
 */
export class PrivatePlaylistControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates private playlist
     * @param {PrivatePlaylistControllerApiCreatePrivatePlaylistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivatePlaylistControllerApi
     */
    public createPrivatePlaylist(requestParameters: PrivatePlaylistControllerApiCreatePrivatePlaylistRequest = {}, options?: AxiosRequestConfig) {
        return PrivatePlaylistControllerApiFp(this.configuration).createPrivatePlaylist(requestParameters.privatePlaylistCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all private playlists
     * @param {PrivatePlaylistControllerApiGetPrivatePlaylistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivatePlaylistControllerApi
     */
    public getPrivatePlaylists(requestParameters: PrivatePlaylistControllerApiGetPrivatePlaylistsRequest = {}, options?: AxiosRequestConfig) {
        return PrivatePlaylistControllerApiFp(this.configuration).getPrivatePlaylists(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PrivatePlaylistTitleControllerApi - axios parameter creator
 * @export
 */
export const PrivatePlaylistTitleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns titles of a specific public playlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitlesOfPrivatePlaylist: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/private-playlist-title-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrivatePlaylistTitleControllerApi - functional programming interface
 * @export
 */
export const PrivatePlaylistTitleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrivatePlaylistTitleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns titles of a specific public playlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTitlesOfPrivatePlaylist(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivatePlaylistTitleLinkView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTitlesOfPrivatePlaylist(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrivatePlaylistTitleControllerApi - factory interface
 * @export
 */
export const PrivatePlaylistTitleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrivatePlaylistTitleControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns titles of a specific public playlist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitlesOfPrivatePlaylist(options?: any): AxiosPromise<PrivatePlaylistTitleLinkView> {
            return localVarFp.getTitlesOfPrivatePlaylist(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PrivatePlaylistTitleControllerApi - object-oriented interface
 * @export
 * @class PrivatePlaylistTitleControllerApi
 * @extends {BaseAPI}
 */
export class PrivatePlaylistTitleControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns titles of a specific public playlist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivatePlaylistTitleControllerApi
     */
    public getTitlesOfPrivatePlaylist(options?: AxiosRequestConfig) {
        return PrivatePlaylistTitleControllerApiFp(this.configuration).getTitlesOfPrivatePlaylist(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicPlaylistControllerApi - axios parameter creator
 * @export
 */
export const PublicPlaylistControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all public playlists
         * @param {number} [labelId] label id to find specific playlist for label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicPlaylists: async (labelId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public-playlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (labelId !== undefined) {
                localVarQueryParameter['labelId'] = labelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicPlaylistControllerApi - functional programming interface
 * @export
 */
export const PublicPlaylistControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicPlaylistControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all public playlists
         * @param {number} [labelId] label id to find specific playlist for label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicPlaylists(labelId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PublicPlaylistView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicPlaylists(labelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicPlaylistControllerApi - factory interface
 * @export
 */
export const PublicPlaylistControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicPlaylistControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all public playlists
         * @param {number} [labelId] label id to find specific playlist for label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicPlaylists(labelId?: number, options?: any): AxiosPromise<Array<PublicPlaylistView>> {
            return localVarFp.getPublicPlaylists(labelId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPublicPlaylists operation in PublicPlaylistControllerApi.
 * @export
 * @interface PublicPlaylistControllerApiGetPublicPlaylistsRequest
 */
export interface PublicPlaylistControllerApiGetPublicPlaylistsRequest {
    /**
     * label id to find specific playlist for label
     * @type {number}
     * @memberof PublicPlaylistControllerApiGetPublicPlaylists
     */
    readonly labelId?: number
}

/**
 * PublicPlaylistControllerApi - object-oriented interface
 * @export
 * @class PublicPlaylistControllerApi
 * @extends {BaseAPI}
 */
export class PublicPlaylistControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns all public playlists
     * @param {PublicPlaylistControllerApiGetPublicPlaylistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicPlaylistControllerApi
     */
    public getPublicPlaylists(requestParameters: PublicPlaylistControllerApiGetPublicPlaylistsRequest = {}, options?: AxiosRequestConfig) {
        return PublicPlaylistControllerApiFp(this.configuration).getPublicPlaylists(requestParameters.labelId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TitleControllerApi - axios parameter creator
 * @export
 */
export const TitleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns all titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/title`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns titles matched against keyword
         * @param {string} [keyword] the term you want to search for
         * @param {number} [tempo] the song tempo you search for
         * @param {Array<number>} [mood] 
         * @param {Array<number>} [genre] 
         * @param {Array<number>} [instrument] the song tempo you search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTitles: async (keyword?: string, tempo?: number, mood?: Array<number>, genre?: Array<number>, instrument?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/title/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (tempo !== undefined) {
                localVarQueryParameter['tempo'] = tempo;
            }

            if (mood) {
                localVarQueryParameter['mood'] = mood;
            }

            if (genre) {
                localVarQueryParameter['genre'] = genre;
            }

            if (instrument) {
                localVarQueryParameter['instrument'] = instrument;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TitleControllerApi - functional programming interface
 * @export
 */
export const TitleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TitleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns all titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTitles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TitleView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTitles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns titles matched against keyword
         * @param {string} [keyword] the term you want to search for
         * @param {number} [tempo] the song tempo you search for
         * @param {Array<number>} [mood] 
         * @param {Array<number>} [genre] 
         * @param {Array<number>} [instrument] the song tempo you search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchTitles(keyword?: string, tempo?: number, mood?: Array<number>, genre?: Array<number>, instrument?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TitleView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchTitles(keyword, tempo, mood, genre, instrument, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TitleControllerApi - factory interface
 * @export
 */
export const TitleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TitleControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns all titles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitles(options?: any): AxiosPromise<Array<TitleView>> {
            return localVarFp.getTitles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns titles matched against keyword
         * @param {string} [keyword] the term you want to search for
         * @param {number} [tempo] the song tempo you search for
         * @param {Array<number>} [mood] 
         * @param {Array<number>} [genre] 
         * @param {Array<number>} [instrument] the song tempo you search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTitles(keyword?: string, tempo?: number, mood?: Array<number>, genre?: Array<number>, instrument?: Array<number>, options?: any): AxiosPromise<Array<TitleView>> {
            return localVarFp.searchTitles(keyword, tempo, mood, genre, instrument, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for searchTitles operation in TitleControllerApi.
 * @export
 * @interface TitleControllerApiSearchTitlesRequest
 */
export interface TitleControllerApiSearchTitlesRequest {
    /**
     * the term you want to search for
     * @type {string}
     * @memberof TitleControllerApiSearchTitles
     */
    readonly keyword?: string

    /**
     * the song tempo you search for
     * @type {number}
     * @memberof TitleControllerApiSearchTitles
     */
    readonly tempo?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof TitleControllerApiSearchTitles
     */
    readonly mood?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof TitleControllerApiSearchTitles
     */
    readonly genre?: Array<number>

    /**
     * the song tempo you search for
     * @type {Array<number>}
     * @memberof TitleControllerApiSearchTitles
     */
    readonly instrument?: Array<number>
}

/**
 * TitleControllerApi - object-oriented interface
 * @export
 * @class TitleControllerApi
 * @extends {BaseAPI}
 */
export class TitleControllerApi extends BaseAPI {
    /**
     * 
     * @summary Returns all titles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleControllerApi
     */
    public getTitles(options?: AxiosRequestConfig) {
        return TitleControllerApiFp(this.configuration).getTitles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns titles matched against keyword
     * @param {TitleControllerApiSearchTitlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TitleControllerApi
     */
    public searchTitles(requestParameters: TitleControllerApiSearchTitlesRequest = {}, options?: AxiosRequestConfig) {
        return TitleControllerApiFp(this.configuration).searchTitles(requestParameters.keyword, requestParameters.tempo, requestParameters.mood, requestParameters.genre, requestParameters.instrument, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates user
         * @param {UserView} [userView] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userView?: UserView, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userView, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs in user
         * @param {AuthenticationView} [authenticationView] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (authenticationView?: AuthenticationView, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationView, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates user
         * @param {UserView} [userView] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userView?: UserView, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userView, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Logs in user
         * @param {AuthenticationView} [authenticationView] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(authenticationView?: AuthenticationView, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(authenticationView, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates user
         * @param {UserView} [userView] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userView?: UserView, options?: any): AxiosPromise<void> {
            return localVarFp.createUser(userView, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<UserView>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logs in user
         * @param {AuthenticationView} [authenticationView] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authenticationView?: AuthenticationView, options?: any): AxiosPromise<UserView> {
            return localVarFp.login(authenticationView, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUser operation in UserControllerApi.
 * @export
 * @interface UserControllerApiCreateUserRequest
 */
export interface UserControllerApiCreateUserRequest {
    /**
     * 
     * @type {UserView}
     * @memberof UserControllerApiCreateUser
     */
    readonly userView?: UserView
}

/**
 * Request parameters for login operation in UserControllerApi.
 * @export
 * @interface UserControllerApiLoginRequest
 */
export interface UserControllerApiLoginRequest {
    /**
     * 
     * @type {AuthenticationView}
     * @memberof UserControllerApiLogin
     */
    readonly authenticationView?: AuthenticationView
}

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates user
     * @param {UserControllerApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public createUser(requestParameters: UserControllerApiCreateUserRequest = {}, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).createUser(requestParameters.userView, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logs in user
     * @param {UserControllerApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public login(requestParameters: UserControllerApiLoginRequest = {}, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).login(requestParameters.authenticationView, options).then((request) => request(this.axios, this.basePath));
    }
}


